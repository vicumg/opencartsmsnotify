<!-- Modal -->
<div class="modal fade" id="notifyModal" tabindex="-1" role="dialog" aria-labelledby="notifyModalLabel" aria-hidden="true" style="z-index: 9999;">
  <div class="modal-dialog" role="document">
    <div class="modal-content"><div class="loader" id="loader-sms"></div>
       <div class="modal-header">
        <h5 class="modal-title" id="notifyModalLabel">Уведомить покупателя</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
         <div class="balance">Баланс: {{ balance }}</div>
      </div>
      <div class="status-message" id="response-message" onclick="this.classList.remove('active')"></div>
      <div class="modal-body">
        <!-- content-->
        <div class="modal-tabs">
          <div class="tab nav">
          {% for key,template in customers_templates %}
                {% if loop.first %}
                {% set active = 'active' %}
                  {% else %}
                    {% set active = '' %}
                  {% endif %}
            <button class="tablinks {{ active }}" onclick="openTab(event, 'v-pills-{{ key }}' )">{{ template.name }}</button>
               {% endfor %}
            <button class="tablinks" onclick="openTab(event, 'v-pills-new' )">Пустая</button>
          </div>
          <div class="tab_content">
            <div class="notify-customer-info">
              <label for="" id="notify-customer-name" class="control-label"></label>
              <label for="" class="control-label">Заказ № - </label>
              <label for="" id="notify-customer-order" class="control-label"></label>
              <label for="" id="" class="control-label">ТТН № - </label>
              <label for="" id="notify-customer-ttn" class="control-label"></label>
              <input type="text" id="notify-customer-phone" class="form-control">
            </div>
              {% for key,template in customers_templates %}
                {% if loop.first %}
                  {% set active = 'active-text' %}
                        {% else %}
                      {% set active = '' %}
                  {% endif %}
                <div id="v-pills-{{ key }}" class="tabcontent {{ active }}">
                  <input hidden type="text" value="{{ template.text }}" id="template_text_{{ key }}" class="notify-template-template">
                  <textarea id="template_text_{{ key }}" class="notify-template-text form-control" rows="5"></textarea>
                </div>

              {% endfor %}
            <div id="v-pills-new" class="tabcontent">
              <input hidden type="text" value="" id="template_text_new" class="notify-template-template">
              <textarea id="template_text_new" class="notify-template-text form-control" rows="5"></textarea>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
          <!-- content-->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
        <button type="button" class="btn btn-primary" onclick="sendSms()">Отправить СМС</button>
        <button type="button" class="btn btn-primary" onclick="sendViber()">Viber</button>
      </div>
    </div>
  </div>
</div>

<script>
  // patterns for replacement with order data
  var replaceVars= {
    order_id:'{order_id}',
    phone:'{phone}',
    ttn:'{ttn}',
    name:'{name}',
    summ:'{sum}',
  };

//show modal window for notify
  function showMessenger(name='',phone='',order='',ttn='',sum='') {

    // update order data for current order to notify
    $('#notify-customer-name').html(name);
    $('#notify-customer-order').html(order);
    $('#notify-customer-phone').val(phone);
    $('#notify-customer-ttn').html(ttn);

    //fill templates with order data
    updateTemplateText(name,phone,order,ttn,sum);

  }
// replace some text in templates by patterns
  function updateTemplateText(name,phone,order_id,ttn,sum) {

    let inputVars={
      order_id:order_id,
      phone:phone,
      ttn:ttn,
      name:name,
      summ:sum,
    }


    let messages = document.getElementsByClassName('notify-template-text');
    let templates = document.getElementsByClassName('notify-template-template');



      for (let i=0;i< templates.length; i++){
        messages[i].value = templates[i].value;
        for (let replaceVar in replaceVars){
          messages[i].value =  messages[i].value.replace(replaceVars[replaceVar],inputVars[replaceVar]);


      }
    }

  }

  //tabs functionality
  function openTab(evt, tabName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
      tabcontent[i].classList.remove('active-text');
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the link that opened the tab
    document.getElementById(tabName).style.display = "block";
    document.getElementById(tabName).classList.add('active-text');
    evt.currentTarget.className += " active";
  }

  function sendSms() {
    const sms = new Sms();
    sms.sendSms();
  }

  function sendViber() {
    const sms = new Sms();
    sms.sendViber();
  }

  class Sms {

    url ='index.php?route=extension/module/ochelp_sms_notify/sendSms&user_token=';
    constructor(){
      this.phone = '#notify-customer-phone';
      this.text = '#notifyModal .active-text textarea';
      const urlParams = new URLSearchParams(window.location.search);
      const token = urlParams.get('user_token');
      this.url+=token;
      this.receiver = document.querySelector(this.phone).value;
      this.message = document.querySelector(this.text).value;
    }

    smsFillData(){
      this.data = new URLSearchParams();;
      this.data.append('phone',this.receiver);
      this.data.append('sms_message',this.message);

    }

    sendSms(){
      this.smsFillData();

    document.getElementById('loader-sms').classList.add('active') ;

    fetch(this.url, {
      "headers": {
        "accept": "application/json, text/javascript, */*; q=0.01",
        "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7,fr;q=0.6,nl;q=0.5,uk;q=0.4",
        "cache-control": "no-cache",
        "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
        "pragma": "no-cache",
        "sec-fetch-dest": "empty",
        "sec-fetch-mode": "cors",
        "sec-fetch-site": "same-origin"
      },
      "referrerPolicy": "no-referrer-when-downgrade",
      "body": this.data,
      "method": "POST",
      "mode": "cors",
      "credentials": "include"
    }).then((response) => {
            return response.json();
        }).then((data) => {
            document.getElementById('loader-sms').classList.remove('active') ;
            let responseMessage = document.getElementById('response-message');
            if (data.result.success == true){
              responseMessage.innerHTML= '<span class="sms-success">'+data.success+'<span>' ;
            } else {
              responseMessage.innerHTML ='<span class="sms-error">'+data.result.description+'<span>';
            }

            responseMessage.classList.add('active');


        });
    }
    sendViber(){
      navigator.clipboard.writeText(this.message);
      console.log(this.receiver);
      location.href='viber://chat?number='+this.receiver;

    }

  }

</script>
<style>
  #notifyModal .modal-header{
    margin-bottom: 30px;
  }
  .modal-tabs {
    display: flex;
    width: 100%;
  }
  .tab_content {
    width: 70%;
  }
  * {box-sizing: border-box}

  /* Style the tab */
  .tab {
    float: left;
    border: 1px solid #ccc;
      overflow-y: auto;
    width: 30%;
    height: 300px;
  }

  /* Style the buttons that are used to open the tab content */
  .tab button {
    display: block;
    background-color: inherit;
    color: black;
    padding: 8px 16px;
    width: 100%;
    border: none;
    outline: none;
    text-align: left;
    cursor: pointer;
    transition: 0.3s;
    text-transform: uppercase;
  }

  /* Change background color of buttons on hover */
  .tab button:hover {
    color: #fff;
    background-color: #1e91cf;
    border-color: #197bb0;
  }

  /* Create an active/current "tab button" class */
  .tab button.active {
    color: #fff;
    background-color: #1e91cf;
    border-color: #197bb0;
  }

  /* Style the tab content */
  .tabcontent {
    float: left;
    padding: 0px 12px;

    width: 100%;
    border-left: none;
    height: 200px;
    display: none;
  }

  .notify-template-text{
    width: 100%;
    margin-top: 15px;
  }
  .notify-customer-info #notify-customer-name{
    display: block;
  }
  .notify-customer-info{
    margin: 5px;
    padding: 5px;
  }

  /*loader*/

  .loader {
    display: none;
    animation: spin 1s infinite linear;
    border: solid 2vmin transparent;
    border-radius: 50%;
    border-right-color: #09f;
    border-top-color: #09f;
    box-sizing: border-box;
    height: 20vmin;
    left: calc(50% - 10vmin);
    position: fixed;
    top: calc(50% - 10vmin);
    width: 20vmin;
    z-index: 1;
  }
  .loader:before {
    animation: spin 2s infinite linear;
    border: solid 2vmin transparent;
    border-radius: 50%;
    border-right-color: #3cf;
    border-top-color: #3cf;
    box-sizing: border-box;
    content: "";
    height: 16vmin;
    left: 0;
    position: absolute;
    top: 0;
    width: 16vmin;
  }
  .loader:after {
    animation: spin 3s infinite linear;
    border: solid 2vmin transparent;
    border-radius: 50%;
    border-right-color: #6ff;
    border-top-color: #6ff;
    box-sizing: border-box;
    content: "";
    height: 12vmin;
    left: 2vmin;
    position: absolute;
    top: 2vmin;
    width: 12vmin;
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }


  .status-message {
    display: none;
    height: 25px;
    position: absolute;
    width: 80%;
    margin-left: 20px;
    top: 85px;
  }
  .active{
    display: block;
  }
  .sms-success{
    color: green;
  }
  .sms-error{
    color: red;
  }
  .active-text{
    display: block;
  }
  .balance {
    margin: 5px 0;
  }
  .middle-order .messenger_button{

    position: absolute;
    right: 10px;
    top: 6px;

  }
  .messenger_button .btn{
    padding: 2px 5px;
    margin: auto;
  }
</style>